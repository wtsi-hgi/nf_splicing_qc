params {
    help = null
    sample_sheet = null
    outdir = "$PWD"
    do_pe_reads = false

    library = "muta"
    barcode_template = "NNNNATNNNNATNNNNATNNNNATNNNNATNNNNATNN"
    barcode_marker = "CTACTGATTCGATGCAAGCTTG"    

    fastp_cut_mean_quality = 20
    flash2_min_overlap = 10
    flash2_max_overlap = 250
    flash2_min_overlap_outie = 20
    flash2_max_mismatch_density = 0.25

    bwa_gap_open = "10,10"
    bwa_gap_ext = "5,5"
    bwa_clip = "1,1"

    filter_softclip_base = 5

    hisat2_score_min = "L,0,-0.3"
    hisat2_mp = "5,2"
    hisat2_sp = "2,1"
    hisat2_np = 0
    hisat2_pen_noncansplice = 0

    do_spliced_products = false
    regtools_min_anchor = 5
    regtools_min_intron = 20

    classify_min_overlap = 2
    classify_min_cov = 2
    classify_reduce = 2
}

process {
    cache = 'lenient'

    cpus   = { check_max( 1    * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    // errorStrategy = ‘retry’
    maxRetries    = 2
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 16   * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 64    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
